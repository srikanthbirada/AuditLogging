input {
	beats {
		port => 443
	}
}

filter {
	if [type] =~ /zscalerlog/ {
		grok {
			match => ["type","zscalerlog_(?<timezone>(.|\r|\n)*)"]
		}
		if [message] =~ /CALLED by/ {
         	grok {
             	match => [ "message", "(?<timestamp>(.|\r|\n)*): smctl.%{POSINT:pid}: (?<log>(.|\r|\n)*)" ]
         	}
         	if [log] =~ /CALLED:/{
            	grok {
                	match => ["log", "CALLED: (?<FunctionCalled>(.|\r|\n)*) \[/sc\]"]
             	}
         	}
         	else {
            	grok {
                 	match => ["log", "CALLED by (?<user>(.|\r|\n)*): (?<FunctionCalled>(.|\r|\n)*)"]
             	}
             	if ["FunctionCalled"] =~ /signal/ {
             		grok {
             			match => ["FunctionCalled","--signal (?<Signal>(.|\r|\n)*) --role (?<Role>(.|\r|\n)*) --brief -M --event (?<event>(.|\r|\n)*) --log (?<EventLog>(.|\r|\n)*) stop \[(?<StoppedBox>(.|\r|\n)*)\]"]
             		}
             	}
         	}
     	}
     	else if [message] =~ /MESSAGE/ {
         	grok {
             	match => [ "message", "(?<timestamp>(.|\r|\n)*): smctl.%{POSINT:pid}: MESSAGE: (?<ErrorMessage>(.|\r|\n)*)" ]
         	}
     	}
     	else if [message] =~ /Stopping/ and [message] =~ /by signal/ {
         	grok {
             	match => [ "message", "(?<timestamp>(.|\r|\n)*): smctl.%{POSINT:pid}: Stopping (?<Role>(.|\r|\n)*) by signal (?<Signal>(.|\r|\n)*)..." ]
         	}
     	}
     	else if [message] =~ /PID/ {
     		grok {
     			match => ["message", "(?<timestamp>(.|\r|\n)*): smctl.%{POSINT:pid}: (?<Role>(.|\r|\n)*) PID (?<ProcessID>(.|\r|\n)*)"]
     		}
     	}
     	else if [message] =~ /Core file/ {
     		grok {
     			match => ["message","(?<timestamp>(.|\r|\n)*): smctl.%{POSINT:pid}: Core file /(?<CoreFile>(.|\r|\n)*) found \(waited %{NUMBER:WaitTime} seconds\)"]
     		}
     	}
     	else {
         	drop { }
     	}
     	date {
        	match => [ "timestamp", "yyyy-MM-dd HH:mm:ss"]
        	timezone => "%{timezone}"
         	target => "@timestamp"
     	}
	}	
	else if [type] =~ /messages/ {
		grok {
			match => ["type","messages_(?<timezone>(.|\r|\n)*)"]
		}
		if [message] =~ /last message repeated/ {
			drop { }
		}
		else if [message] =~ /sudo:/ {
			grok {
				match => ["message", "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:EventType}: %{SPACE} %{WORD:group} :(?<AttemptMessage>(.|\r|\n)*)TTY=(?<tty>(.|\r|\n)*) ; PWD=(?<pwd>(.|\r|\n)*) ; USER=(?<user>(.|\r|\n)*) ; COMMAND=(?<command>(.|\r|\n)*)"]
			}
			date {
        		match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        		timezone => "%{timezone}"
        		target => "@timestamp"
    		}
		}
		else if [message] =~ /ntpdate/ {
			if [message] =~ /time server/ {
				grok {
					match => ["message","%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:EventType}(?:\[%{POSINT:pid}\])?: %{WORD:action} time server %{IP:ServerIP} offset (?<TimeOffset>(.|\r|\n)*)"]
				}
				date {
        			match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        			timezone => "%{timezone}"
        			target => "@timestamp"
    			}
    		}
    		else {
    			grok {
    				match => ["message","%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:EventType}(?:\[%{POSINT:pid}\])?: (?<ActionMessage>(.|\r|\n)*)"]
    			}
    			date {
        			match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        			timezone => "%{timezone}"
        			target => "@timestamp"
    			}
    		}
		}
		else if [message] =~ /su:/ {
			drop { }
		}
		else if [message] =~ /kernel/ {
			grok {
				match => ["message","%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:EventType}: (?<KernelMessage>(.|\r|\n)*)"]
			}
			date {
        		match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        		timezone => "%{timezone}"
        		target => "@timestamp"
    		}
            if[KernelMessage] =~ /error/ {
                grok {
                    match => ["KernelMessage","%{Data:DiskPartition}: (?ErrorType>(.|\r|\n)*) cmd=%{DATA:Command} (?OtherDetails>(.|\r|\n)*)"]
                }
            }
            else if [KernelMessage] =~ /g_vfs_done/ {
                grok {
                    match => ["KernelMessage","g_vfs_done():%{DATA:disk}\[WRITE(offset=%{NUMBER:Offset}, length=%{NUMBER:Length})\]error = %{NUMBER:Error}"]
                }
            }
		}
		else if [message] =~ /just logged in/ {
			grok {
				match => ["message","%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:group}: (?<Person>(.|\r|\n)*) just logged in from %{IP:LoginIp} %{NUMBER:Extport} %{NUMBER:Intport}"]
			}
			date {
        		match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        		timezone => "%{timezone}"
        		target => "@timestamp"
    		}
		}
		else {
			grok {
				match => ["message","%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:group}: (?<message>(.|\r|\n)*)"]
				overwrite => [ "message" ]
			}
			date {
        		match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        		timezone => "%{timezone}"
        		target => "@timestamp"
    		}			
		}
        if [timestamp] =~ /Dec 31/ {
            drop { }
        }
	}
	else if [type] =~ /bashhistory/ {
		mutate {
			rename => [ "message","Command"]
		}
	}
	else if [type] =~ /installog/ {
		if [message] =~ /installed/ {
         	grok {
             	match => ["message", "(?<timestamp>(.|\r|\n)*): build (?<Build>(.|\r|\n)*) installed for role\(s\): (?<Role>(.|\r|\n)*)"]
             	add_field => ["Action","Installed"]
         	}
         	grok {
         		match => ["type","installog_(?<timezone>(.|\r|\n)*)"]
         	}
         	date {
            	match => [ "timestamp", "MM/dd/yy HH:mm:ss"]
            	timezone => "%{timezone}"
             	target => "@timestamp"
         	}
     	}
     	else {
         	drop { }
     	}
	}
	else if [type] =~ /spmlog/ {
		grok {
			match => ["type","spmlog_(?<timezone>(.|\r|\n)*)"]
		}
		if [message] =~ /loaded/ {
			grok {
				match => ["message","(?<timestamp>(.|\r|\n)*): smspm(?<remain>(.|\r|\n)*)"]
				add_field => { "Action" => "Reloaded" }
				add_field => { "Function" => "SMSPM" }
			}
			date {
    	   		match => [ "timestamp", "E MMM  d HH:mm:ss YYYY", "E MMM dd HH:mm:ss YYYY" ]
    	   		timezone => "%{timezone}"
       			target => "@timestamp"
    		}
    	}
    	else if [message] =~ /failed/ {
    		grok {
				match => ["message","(?<timestamp>(.|\r|\n)*): smspm(?<remain>(.|\r|\n)*)"]
				add_field => { "Action" => "Failed" }
				add_field => { "Function" => "SMSPM" }
			}
			date {
    	   		match => [ "timestamp", "E MMM  d HH:mm:ss YYYY", "E MMM dd HH:mm:ss YYYY" ]
    	   		timezone => "%{timezone}"
       			target => "@timestamp"
    		}
    	}
    	else {
    		drop { }
    	}
	}
	else if [type] =~ /setcainfo/ {
		grok {
			match => ["message","\[%{WORD:Group}\] \[(?<User>(.|\r|\n)*)\] \[(?<timestamp>(.|\r|\n)*)\] \[(?<Command>(.|\r|\n)*)\] \[%{WORD:Status}\]"]
		}
		kv {
			source => "Command"
		}
		grok {
			match => ["type","setcainfo_(?<timezone>(.|\r|\n)*)"]
		}
		date {
			match => [ "timestamp" , "EEE MMM dd HH:mm:ss zzz YYYY" , "EEE MMM  d HH:mm:ss zzz YYYY"]
			target => "@timestamp"
		}
	}
	else if [type] =~ /smsmclustermgmt/ {
		grok {
        	match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:program}(?:\[%{POSINT:pid}\])?: (\[%{DATA:processtype}\]) ?: (?<message>(.|\r|\n)*)" ]
        	overwrite => [ "message" ]
    	}
    	grok {
    		match => [ "type","smsmclustermgmt_(?<timezone>(.|\r|\n)*)"]
    	}
    	date {
        	match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        	timezone => "%{timezone}"
        	target => "@timestamp"
    	}
    	mutate {
    		gsub => [ "message", ";", "" ]
    	}
    	kv {
    		source => "message"
    		value_split => ":"
    	}
	}
    else if [type] =~ /smsmcounters/ {
        grok {
            match => ["message","%{WORD:device}.(?<counter>(.|\r|\n)*) %{NUMBER:countervalue} (?<epochtimestamp>(.|\r|\n)*) host=(?<hostname>(.|\r|\n)*) cloud=(?<cloudname>(.|\r|\n)*)"]
        }
        if "_grokparsefailure"  in [tags] {
            drop { }
        }
    }
	else {
		drop { }
	}
}

output {
	if [type] =~ /zscalerlog/ {
		elasticsearch {
		    hosts => ["localhost:9200"]
 	     	index => "zscalerlogdata"
 	   	}
	}
	else if [type] =~ /messages/ {
		elasticsearch {
		    hosts => ["localhost:9200"]
 	     	index => "varlogmessages"
 	   	}
	}
	else if [type] =~ /bashhistory/ {
		elasticsearch {
		    hosts => ["localhost:9200"]
 	     	index => "bashloghistory"
 	   	}
	}
	else if [type] =~ /installog/ {
		elasticsearch {
		    hosts => ["localhost:9200"]
 	     	index => "installogdata"
 	   	}
	}
	else if [type] =~ /spmlog/ {
		elasticsearch {
			hosts => ["localhost:9200"]
			index => "spmlogdata"
		}
	}
	else if [type] =~ /setcainfo/ {
		elasticsearch {
	    	hosts => ["localhost:9200"]
      		index => "setcainfologdata"
 		}
 	}
 	else if [type] =~ /smsmclustermgmt/ {
 		elasticsearch {
	    	hosts => ["localhost:9200"]
      		index => "smsmclustermgmtlogdata"
 		}
 	}
    else if [type] =~ /smsmcounters/ {
        elasticsearch {
            hosts => ["localhost:9200"]
            index => "smsmcounterslogdata"
        }    
    }
	else {
		stdout { }
	}
}
